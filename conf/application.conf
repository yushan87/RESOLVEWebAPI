# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = [ "en" ]
}

## Play HTTP settings
# ~~~~~
play.http {

  ## Request Handler
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  requestHandler = "play.http.DefaultHttpRequestHandler"

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaErrorHandling
  # https://www.playframework.com/documentation/latest/ScalaErrorHandling
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  errorHandler = "handlers.HttpErrorHandler"
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.  You must enable this by adding to build.sbt:
#
# libraryDependencies += filters
#
play.filters {
  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # Allow action-specific security headers
    allowActionSpecificHeaders = true
  }

  enabled += "play.filters.headers.SecurityHeadersFilter"
}

# Include our own configurations
include "local-config.conf"